argo-cd:
  configs:
    secret:
      createSecret: false
  global:
    imagePullSecrets: 
      - name: docker-creds
  redis:
    enabled: false
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
  redis-ha:
    enabled: true
    image:
      repository: harbor.blah.cloud/dockerhub/library/redis
    haproxy:
      image:
        repository: harbor.blah.cloud/dockerhub/library/haproxy
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    exporter:
      enabled: false
  dex:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 15s
        namespace: argocd
    env:
      - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: argo-workflows-sso
            key: client-secret
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
  controller:
    enableStatefulSet: true
    replicas: 2
    args:
      statusProcessors: "10"
      operationProcessors: "5"
    env:
    - name: "ARGOCD_CONTROLLER_REPLICAS"
      value: "2"
    extraArgs:
    - --repo-server-timeout-seconds
    - "1000"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 15s
        namespace: argocd
      rules:
        enabled: false
        spec: []
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - argocd-application-controller
            topologyKey: "kubernetes.io/hostname"
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 250m
        memory: 128Mi
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - argocd-repo-server
            topologyKey: "kubernetes.io/hostname"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 15s
        namespace: argocd
    env:
      - name: "ARGOCD_EXEC_TIMEOUT"
        value: "5m"
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
  server:
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 100m
        memory: 64Mi
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - argocd-server
            topologyKey: "kubernetes.io/hostname"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 15s
        namespace: argocd
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    extraArgs:
    - --insecure
    ingress:
        enabled: true
        hosts:
        - argocd.apps.blah.cloud
        https: false
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-live
          kubernetes.io/ingress.class: traefik
        ingressClassName: "traefik"
        tls:
        - secretName: argocd-https-cert
          hosts:
          - argocd.apps.blah.cloud
    ingressGrpc:
        enabled: true
        hosts:
        - argocd.apps.blah.cloud
        https: false
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-live
          kubernetes.io/ingress.class: traefik
        ingressClassName: "traefik"
        tls:
        - secretName: argocd-grpc-cert
          hosts:
          - argocd.apps.blah.cloud
    config:
        admin.enabled: 'true'
        statusbadge.enabled: 'true'
        users.anonymous.enabled: 'true'
        url: https://argocd.apps.blah.cloud
        dex.config: |
          logger:
            level: "debug"
          connectors:
          - type: github
            id: github
            name: GitHub
            config:
              clientID: $dex.github.clientId
              clientSecret: $dex.github.clientSecret
              orgs:
              - name: blahcloud
          staticClients:
            - id: argo-workflow
              name: 'Argo Workflow'
              redirectURIs:
                - https://argo-workflows.apps.blah.cloud/oauth2/callback
              secretEnv: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
        resource.customizations: |
          admissionregistration.k8s.io/MutatingWebhookConfiguration:
            ignoreDifferences: |
              jsonPointers:
              - /webhooks/0/clientConfig/caBundle
          networking.k8s.io/Ingress:
            health.lua: |
              hs = {}
              hs.status = "Healthy"
              return hs
        resource.exclusions: |
          - apiGroups:
            - "velero.io"
            kinds:
            - Backup
            clusters:
            - '*'
        repositories: |
          - url: https://github.com/mylesagray/home-cluster-gitops.git
          - url: https://charts.helm.sh/stable
            name: stable
            type: helm
        repository.credentials: |
          - url: https://github.com/mylesagray
            passwordSecret:
                name: github-secret
                key: password
            usernameSecret:
                name: github-secret
                key: username
    rbacConfig:
      policy.default: role:readonly
      policy.csv: |
        g, blahcloud:k8s, role:admin
    additionalProjects: 
    - name: default
      namespace: argocd
      additionalAnnotations: 
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: kubernetes
      sourceRepos:
      - '*'
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
      destinations:
      - namespace: '*'
        server: '*'
    - name: cd
      namespace: argocd
      additionalAnnotations: 
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: kubernetes
      sourceRepos:
      - '*'
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
      destinations:
      - namespace: '*'
        server: '*'
    additionalApplications:
    - name: bootstrap
      namespace: argocd
      project: default
      source:
        repoURL: https://github.com/mylesagray/home-cluster-gitops.git
        targetRevision: HEAD
        path: apps/bootstrap
      destination:
        server: https://kubernetes.default.svc
        namespace: infra
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
  notifications:
    argocdUrl: https://argocd.apps.blah.cloud
    secret:
      create: false
    notifiers:
      service.slack: |
        token: $slack-token
      service.grafana: |
        apiUrl: $grafana-apiUrl
        apiKey: $grafana-apiKey
    subscriptions:
      - recipients:
        - slack:kubernetes
    bots:
      slack:
        enabled: true
    triggers:
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.sync.revision
          send:
          - app-deployed
          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState.phase in ['Error', 'Failed']
      trigger.on-sync-running: |
        - description: Application is being synced
          send:
          - app-sync-running
          when: app.status.operationState.phase in ['Running']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      trigger.on-sync-succeeded: |
        - description: Application syncing has succeeded
          send:
          - app-sync-succeeded
          when: app.status.operationState.phase in ['Succeeded']
    templates:
      template.app-deployed: |
        email:
          subject: New version of an application {{.app.metadata.name}} is up and running.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
        slack:
          attachments: |
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              },
              {
                "title": "Revision",
                "value": "{{.app.status.sync.revision}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-health-degraded: |
        email:
          subject: Application {{.app.metadata.name}} has degraded.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#f4c030",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-failed: |
        email:
          subject: Failed to sync application {{.app.metadata.name}}.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-running: |
        email:
          subject: Start syncing application {{.app.metadata.name}}.
        message: |
          The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#0DADEA",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-status-unknown: |
        email:
          subject: Application {{.app.metadata.name}} sync status is 'Unknown'
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
          {{if ne .serviceType "slack"}}
          {{range $c := .app.status.conditions}}
              * {{$c.message}}
          {{end}}
          {{end}}
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-succeeded: |
        email:
          subject: Application {{.app.metadata.name}} has been successfully synced.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: "[{\n  \"title\": \"{{ .app.metadata.name}}\",\n  \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n  \"color\": \"#18be52\",\n  \"fields\": [\n  {\n    \"title\": \"Sync Status\",\n    \"value\": \"{{.app.status.sync.status}}\",\n    \"short\": true\n  },\n  {\n    \"title\": \"Repository\",\n    \"value\": \"{{.app.spec.source.repoURL}}\",\n    \"short\": true\n  }\n  {{range $index, $c := .app.status.conditions}}\n  {{if not $index}},{{end}}\n  {{if $index}},{{end}}\n  {\n    \"title\": \"{{$c.type}}\",\n    \"value\": \"{{$c.message}}\",\n    \"short\": true\n  }\n  {{end}}\n  ]\n}]    "